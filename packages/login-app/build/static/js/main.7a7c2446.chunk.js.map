{"version":3,"sources":["LoginPage/LoginPage.js","App.js","serviceWorker.js","index.js"],"names":["Copyright","Typography","variant","color","align","Link","href","Date","getFullYear","useLoginPageStyles","makeStyles","theme","paper","marginTop","spacing","display","flexDirection","alignItems","avatar","margin","backgroundColor","form","width","submit","background","Login","loginPageClasses","Container","component","maxWidth","CssBaseline","className","Avatar","noValidate","TextField","required","fullWidth","id","label","name","autoComplete","autoFocus","type","FormControlLabel","control","Checkbox","value","Button","Box","mt","generateClassName","createGenerateClassName","productionPrefix","App","StylesProvider","Boolean","window","location","hostname","match","renderLoginView","containerId","history","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","unmountLoginView","unmountComponentAtNode"],"mappings":"yWAeA,SAASA,IACP,OACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,QAAQC,MAAM,gBAAgBC,MAAM,UACrD,kBACD,kBAACC,EAAA,EAAD,CAAMF,MAAM,UAAUG,KAAK,4BAA3B,6BAEQ,KACP,IAAIC,MAAOC,cACX,KAKP,IAAMC,EAAqBC,aAAW,SAACC,GAAD,MAAY,CAChDC,MAAO,CACLC,UAAWF,EAAMG,QAAQ,GACzBC,QAAS,OACTC,cAAe,SACfC,WAAY,UAEdC,OAAQ,CACNC,OAAQR,EAAMG,QAAQ,GACtBM,gBAAiB,QAEnBC,KAAM,CACJC,MAAO,OACPT,UAAWF,EAAMG,QAAQ,IAE3BS,OAAQ,CACNpB,MAAO,QACPqB,WAAY,UACZL,OAAQR,EAAMG,QAAQ,EAAG,EAAG,QAIjB,SAASW,IACtB,IAAMC,EAAmBjB,IAEzB,OACE,kBAACkB,EAAA,EAAD,CAAWC,UAAU,OAAOC,SAAS,MACnC,kBAACC,EAAA,EAAD,MACA,yBAAKC,UAAWL,EAAiBd,OAC/B,kBAACoB,EAAA,EAAD,CAAQD,UAAWL,EAAiBR,QAClC,kBAAC,IAAD,OAEF,kBAACjB,EAAA,EAAD,CAAY2B,UAAU,KAAK1B,QAAQ,MAAnC,SAGA,0BAAM6B,UAAWL,EAAiBL,KAAMY,YAAU,GAChD,kBAACC,EAAA,EAAD,CACEhC,QAAQ,WACRiB,OAAO,SACPgB,UAAQ,EACRC,WAAS,EACTC,GAAG,QACHC,MAAM,gBACNC,KAAK,QACLC,aAAa,QACbC,WAAS,IAEX,kBAACP,EAAA,EAAD,CACEhC,QAAQ,WACRiB,OAAO,SACPgB,UAAQ,EACRC,WAAS,EACTG,KAAK,WACLD,MAAM,WACNI,KAAK,WACLL,GAAG,WACHG,aAAa,qBAEf,kBAACG,EAAA,EAAD,CACEC,QAAS,kBAACC,EAAA,EAAD,CAAUC,MAAM,WAAW3C,MAAM,YAC1CmC,MAAM,gBAER,kBAACS,EAAA,EAAD,CACEL,KAAK,SACLN,WAAS,EACTlC,QAAQ,YACRC,MAAM,UACN4B,UAAWL,EAAiBH,QAL9B,WAWJ,kBAACyB,EAAA,EAAD,CAAKC,GAAI,GACP,kBAACjD,EAAD,Q,sBCjGFkD,EAAoBC,YAAwB,CAChDC,iBAAkB,cAaLC,MAVf,WACE,OACE,yBAAKtB,UAAU,OACb,kBAACuB,EAAA,EAAD,CAAgBJ,kBAAmBA,GACjC,kBAACzB,EAAD,SCDY8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNH,OAAOI,gBAAkB,SAACC,EAAaC,GACrCC,IAASC,OACP,kBAAC,EAAD,CAAKF,QAASA,IACdG,SAASC,eAAeL,ID0HtB,kBAAmBM,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,aCvH5BpB,OAAOqB,iBAAmB,SAAChB,GACzBE,IAASe,uBAAuBb,SAASC,eAAeL,KAIrDI,SAASC,eAAe,wBAC3BH,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.7a7c2446.chunk.js","sourcesContent":["import React from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Box from '@material-ui/core/Box';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\n\r\n// Add to shared component library and import\r\nfunction Copyright() {\r\n  return (\r\n    <Typography variant='body2' color='textSecondary' align='center'>\r\n      {'Copyright Â© '}\r\n      <Link color='inherit' href='https://www.helixcp.com/'>\r\n        Helix Consulting Partners\r\n      </Link>{' '}\r\n      {new Date().getFullYear()}\r\n      {'.'}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nconst useLoginPageStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: 'grey',\r\n  },\r\n  form: {\r\n    width: '100%',\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    color: 'white',\r\n    background: 'primary',\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n}));\r\n\r\nexport default function Login() {\r\n  const loginPageClasses = useLoginPageStyles();\r\n\r\n  return (\r\n    <Container component='main' maxWidth='xs'>\r\n      <CssBaseline />\r\n      <div className={loginPageClasses.paper}>\r\n        <Avatar className={loginPageClasses.avatar}>\r\n          <LockOutlinedIcon />\r\n        </Avatar>\r\n        <Typography component='h1' variant='h5'>\r\n          Login\r\n        </Typography>\r\n        <form className={loginPageClasses.form} noValidate>\r\n          <TextField\r\n            variant='outlined'\r\n            margin='normal'\r\n            required\r\n            fullWidth\r\n            id='email'\r\n            label='Email Address'\r\n            name='email'\r\n            autoComplete='email'\r\n            autoFocus\r\n          />\r\n          <TextField\r\n            variant='outlined'\r\n            margin='normal'\r\n            required\r\n            fullWidth\r\n            name='password'\r\n            label='Password'\r\n            type='password'\r\n            id='password'\r\n            autoComplete='current-password'\r\n          />\r\n          <FormControlLabel\r\n            control={<Checkbox value='remember' color='primary' />}\r\n            label='Remember me'\r\n          />\r\n          <Button\r\n            type='submit'\r\n            fullWidth\r\n            variant='contained'\r\n            color='primary'\r\n            className={loginPageClasses.submit}\r\n          >\r\n            Login\r\n          </Button>\r\n        </form>\r\n      </div>\r\n      <Box mt={8}>\r\n        <Copyright />\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport LoginPage from './LoginPage/LoginPage';\r\nimport { StylesProvider, createGenerateClassName } from '@material-ui/core/styles';\r\n\r\nconst generateClassName = createGenerateClassName({\r\n  productionPrefix: 'loginApp-',\r\n});\r\n\r\nfunction App() {\r\n  return (\r\n    <div className='App'>\r\n      <StylesProvider generateClassName={generateClassName}>\r\n        <LoginPage />\r\n      </StylesProvider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nwindow.renderLoginView = (containerId, history) => {\r\n  ReactDOM.render(\r\n    <App history={history} />,\r\n    document.getElementById(containerId)\r\n  );\r\n  // If you want your app to work offline and load faster, you can change\r\n  // unregister() to register() below. Note this comes with some pitfalls.\r\n  // Learn more about service workers: https://bit.ly/CRA-PWA\r\n  serviceWorker.unregister();\r\n};\r\n\r\n//unmounts company when leaving\r\nwindow.unmountLoginView = (containerId) => {\r\n  ReactDOM.unmountComponentAtNode(document.getElementById(containerId));\r\n};\r\n\r\n// Mount to root if it is not a micro frontend\r\nif (!document.getElementById('LoginView-container')) {\r\n  ReactDOM.render(<App />, document.getElementById('root'));\r\n}\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n"],"sourceRoot":""}